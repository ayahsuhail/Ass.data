
الكود:

def find_repeated_elements(B):
    distinct_elements = set()  # مجموعة لتخزين العناصر المميزة
    repeated_elements = []     # قائمة لتخزين العناصر المكررة

    for b in B:
        if b in distinct_elements:
            if b not in repeated_elements:  # إضافة العنصر فقط مرة واحدة
                repeated_elements.append(b)
            if len(repeated_elements) == 5:  # التوقف بعد إيجاد جميع العناصر المكررة
                break
        else:
            distinct_elements.add(b)

    return repeated_elements

تحليل الخوارزمية:

تعقيد الزمن: O(n)، حيث n هو حجم المصفوفة B. نقوم بالتكرار عبر المصفوفة مرة واحدة، وكل عملية بحث وإضافة في المجموعة أو القائمة تتم في وقت ثابت (O(1)).

تعقيد المساحة: O(n)، لأن المجموعة distinct_elements قد تخزن ما يصل إلى n - 5 عنصرًا مميزًا. وبالتالي، فإن المساحة المطلوبة ستكون متناسبة مع حجم المصفوفة B.


ملاحظات:

تعقيد المساحة: الكود يعمل بشكل جيد، حيث نستخدم مجموعة لتخزين العناصر المميزة وقائمة لتخزين العناصر المكررة. لكن المساحة المستخدمة تعتمد على عدد العناصر في المصفوفة، وبالتالي التعقيد هو O(n).

التوقف بعد العثور على العناصر المكررة: بمجرد أن نجد جميع العناصر المكررة (الخمس عناصر)، نوقف التكرار باستخدام شرط if len(repeated_elements) == 5.