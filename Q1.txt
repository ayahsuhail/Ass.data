ูุฌุจ ููู ุฌููุน ุงูุนูุงุตุฑ ูู ุงูููุฏุณ 
๐
s ุฅูู 
๐
T ุจุญูุซ ูุตุจุญ ุฃูู ุนูุตุฑ ูู 
๐
S ูู ุขุฎุฑ ุนูุตุฑ ูู 
๐
T.
ูููู ุชูููุฐ ุฐูู ุจุงุณุชุฎุฏุงู ููุฏุณ ูุณูุท ููุณุงุนุฏุฉ ูู ุงูุญูุงุธ ุนูู ุงูุชุฑุชูุจ.


ุงูุญู 
import java.util.Stack;

public class StackTransfer {
    public static void transfer(Stack<Integer> S, Stack<Integer> T) {
        Stack<Integer> temp = new Stack<>();
        
        // ููู ุงูุนูุงุตุฑ ุฅูู ุงูููุฏุณ ุงููุคูุช ูุนูุณ ุงูุชุฑุชูุจ
        while (!S.isEmpty()) {
            temp.push(S.pop());
        }
        
        // ููู ุงูุนูุงุตุฑ ูู ุงูููุฏุณ ุงููุคูุช ุฅูู T
        while (!temp.isEmpty()) {
            T.push(temp.pop());
        }
    }

    public static void main(String[] args) {
        Stack<Integer> S = new Stack<>();
        Stack<Integer> T = new Stack<>();

        S.push(1);
        S.push(2);
        S.push(3);
        S.push(4);

        transfer(S, T);

        System.out.println("Stack T after transfer: " + T);
    }
}
